Задание 1: Описание взаимодействия клиента с сервером
Представьте, что вы работаете с интернет-магазином книг, где функциональность распределена на несколько микросервисов: список книг, корзина и профиль пользователя. Опишите, как происходит взаимодействие клиента с сервером при процессе покупки книги:

1. Пользователь открывает страницу интернет-магазина и видит список книг:
Запрос:
Клиент (браузер) отправляет GET-запрос к серверу (микросервису "Список книг").
Пример: GET /books
Ответ:
Сервер возвращает список доступных книг, например, в формате JSON.
Пример:
json
Копировать
Редактировать
[
  { "id": 1, "title": "Book 1", "author": "Author 1", "price": 500 },
  { "id": 2, "title": "Book 2", "author": "Author 2", "price": 600 }
]
Код ответа: 200 OK
2. Пользователь нажимает на кнопку добавления выбранных книг в корзину:
Запрос:
Клиент (браузер) отправляет POST-запрос к серверу (микросервису "Корзина") для добавления книги в корзину.
Пример: POST /cart/add
Тело запроса:
json
Копировать
Редактировать
{ "bookId": 1, "quantity": 1 }
Ответ:
Сервер подтверждает добавление книги в корзину.
Пример:
json
Копировать
Редактировать
{ "message": "Item added to cart", "cartId": "xyz123", "totalPrice": 500 }
Код ответа: 200 OK
3. Пользователь переходит на страницу оформления заказа:
Запрос:
Клиент (браузер) отправляет GET-запрос к серверу (микросервису "Корзина") для получения информации о текущем содержимом корзины.
Пример: GET /cart
Ответ:
Сервер возвращает информацию о товарах в корзине.
Пример:
json
Копировать
Редактировать
{ 
  "items": [
    { "bookId": 1, "title": "Book 1", "quantity": 1, "price": 500 }
  ],
  "totalPrice": 500
}
Код ответа: 200 OK
Запрос:
Клиент (браузер) отправляет GET-запрос к серверу (микросервису "Профиль пользователя") для получения данных профиля пользователя (например, имени, электронной почты).
Пример: GET /profile
Ответ:
Сервер возвращает данные профиля пользователя.
Пример:
json
Копировать
Редактировать
{ "userId": 1, "name": "John Doe", "email": "john.doe@example.com" }
Код ответа: 200 OK
4. Пользователь оформляет заказ:
Запрос:
Клиент (браузер) отправляет POST-запрос для оформления заказа, передавая информацию о корзине и данных профиля пользователя.
Пример: POST /order/create
Тело запроса:
json
Копировать
Редактировать
{
  "cartId": "xyz123",
  "userId": 1,
  "shippingAddress": "123 Main St, City, Country",
  "paymentMethod": "Credit Card"
}
Ответ:
Сервер подтверждает успешное создание заказа и возвращает его ID.
Пример:
json
Копировать
Редактировать
{ "orderId": "order123", "totalPrice": 500, "status": "Confirmed" }
Код ответа: 201 Created
Задание 2: Проверка корзины
Для тестирования корзины интернет-магазина необходимо провести следующие проверки:

Проверка добавления товаров в корзину:

Убедиться, что товары добавляются в корзину корректно.
Проверить, что количество товаров и их цена правильные.
Проверить, что товары остаются в корзине после перезагрузки страницы (если корзина сохраняется).
Проверка удаления товаров из корзины:

Убедиться, что товары можно удалить из корзины.
Проверить, что корзина пустая после удаления всех товаров.
Проверить, что общая сумма корзины обновляется корректно.
Проверка изменения количества товаров:

Убедиться, что изменение количества товара в корзине влияет на итоговую сумму.
Проверить, что корзина не принимает отрицательные или некорректные значения для количества.
Проверка отображения корзины:

Проверить, что корзина отображает правильные товары, их количество и общую стоимость.
Проверка на максимальный/минимальный лимит товаров:

Убедиться, что корзина правильно обрабатывает ситуации, когда количество товаров превышает максимальные лимиты.
Проверка авторизации:

Проверить, что для доступа к корзине пользователь должен быть авторизован.
Проверить, что неавторизованный пользователь получает предупреждение или редирект на страницу входа.
Проверка на кэширование:

Убедиться, что корзина сохраняет содержимое даже при перезагрузке страницы или выходе пользователя, если это предусмотрено.
Задание 3: Валидация профиля пользователя
Для проверки страницы профиля пользователя, где он может редактировать свои данные, можно использовать следующие виды тест-дизайна:

Имя пользователя:

Позитивные тесты:
Проверить, что можно ввести имя с буквами, включая пробелы и апострофы (например, "John Doe", "O'Connor").
Проверить, что имя отображается корректно после сохранения.
Негативные тесты:
Проверить, что система не позволяет ввести специальные символы (например, !@#, цифры).
Проверить, что система не принимает пустое имя.
Электронная почта:

Позитивные тесты:
Проверить, что система принимает валидный формат электронной почты (например, email@example.com).
Проверить, что электронная почта сохраняется корректно после редактирования.
Негативные тесты:
Проверить, что система отклоняет неверный формат электронной почты (например, email@com, email@.com).
Проверить, что система отклоняет пустое поле.
Пароль:

Позитивные тесты:
Проверить, что пароль сохраняется корректно и имеет минимальные требования по безопасности (например, минимум 8 символов, наличие цифр и символов).
Проверить, что после редактирования пароль изменяется.
Негативные тесты:
Проверить, что система отклоняет слабые пароли (например, 123456, password).
Проверить, что система отклоняет пустое поле пароля.
Проверить, что система отклоняет пароли, которые не совпадают при подтверждении.
Виды тест-дизайна:
Граничные значения (Boundary Testing): Проверка минимальных и максимальных значений для каждого поля (например, минимальная длина имени или пароля).
Тестирование на корректность ввода (Input Validation Testing): Проверка ввода данных и их обработки на серверной стороне.
Тестирование безопасности (Security Testing): Проверка пароля на сложность и отказ от слабых паролей.
Тестирование пользовательского интерфейса (UI Testing): Проверка на правильность отображения полей и их взаимодействия.